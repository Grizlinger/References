# -*- coding: utf-8 -*-
"""CellNN_Course_02b.ipynb mÃ¡solata

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1_9ZYWLgzfKwG-q-4HvCL07ia99JQhacr
"""

# Commented out IPython magic to ensure Python compatibility.
#we need this to play animation
import numpy as np
import matplotlib.pyplot as plt
import matplotlib.animation as animation
# %pylab inline

def life_step_1(X):
    """Game of life step using generator expressions"""
    nbrs_count = sum(np.roll(np.roll(X, i, 0), j, 1)
                     for i in (-1, 0, 1) for j in (-1, 0, 1)
                     if (i != 0 or j != 0))
    return (nbrs_count == 3) | (X & (nbrs_count == 2))

def life_step_2(X):
    """Game of life step using scipy tools"""
    from scipy.signal import convolve2d
    nbrs_count = convolve2d(X, np.ones((3, 3)), mode='same', boundary='wrap') - X
    return (nbrs_count == 3) | (X & (nbrs_count == 2))
    
life_step = life_step_1

# JSAnimation import available at https://github.com/jakevdp/JSAnimation
from matplotlib import animation 
from IPython.display import HTML

def life_animation(X, dpi=10, frames=10, interval=300, mode='loop'):
    """Produce a Game of Life Animation
    
    Parameters
    ----------
    X : array_like
        a two-dimensional numpy array showing the game board
    dpi : integer
        the number of dots per inch in the resulting animation.
        This controls the size of the game board on the screen
    frames : integer
        The number of frames to compute for the animation
    interval : float
        The time interval (in milliseconds) between frames
    mode : string
        The default mode of the animation.  Options are ['loop'|'once'|'reflect']
    """
    X = np.asarray(X)
    assert X.ndim == 2
    X = X.astype(bool)
    
    X_blank = np.zeros_like(X)
    figsize = (50,50)

    fig = plt.figure(figsize=figsize, dpi=dpi)
    ax = fig.add_axes([0, 0, 1, 1], xticks=[], yticks=[], frameon=False)
    im = ax.imshow(X, cmap=plt.cm.binary, interpolation='nearest')
    im.set_clim(-0.05, 1)  # Make background gray

    # initialization function: plot the background of each frame
    def init():
        im.set_data(X_blank)
        return (im,)

    # animation function.  This is called sequentially
    def animate(i):
        im.set_data(animate.X)
        animate.X = life_step(animate.X)
        return (im,)
    animate.X = X

    anim = animation.FuncAnimation(fig, animate, init_func=init,
                                   frames=frames, interval=interval,blit=True)

    plt.close()
    
    #print anim_to_html(anim)
    return anim

#quick test to display automaton
np.random.seed(0)
X = np.zeros((30, 40), dtype=bool)
r = np.random.random((10, 20))
X[10:20, 10:30] = (r > 0.75)
anim=life_animation(X, dpi=10, frames=40, mode='once')
HTML(anim.to_html5_video())

#satic structures
ellipse=[[0, 1, 1, 0],
               [1, 0, 0, 1],
               [0, 1, 1, 0]]
circle1=[[0, 1, 1, 0],
                 [1, 0, 0, 1],
                 [0, 1, 0, 1],
                 [0, 0, 1, 0]]
circle2= [[1, 1, 0],
                 [1, 0, 1],
                 [0, 1, 0]]
square=np.ones((2,2))
X = np.zeros((6, 21))
X[2:4, 1:3] = square
X[1:4, 5:9] = ellipse
X[1:5, 11:15] = circle1
X[1:4, 17:20] = circle2

anim=life_animation(X, dpi=5, frames=3)
HTML(anim.to_html5_video())

#periodic strucutres
blinker = [1, 1, 1]
toad = [[1, 1, 1, 0],
        [0, 1, 1, 1]]

X = np.zeros((6, 11))
X[2, 1:4] = blinker
X[2:4, 6:10] = toad
anim=life_animation(X, dpi=5, frames=4)
HTML(anim.to_html5_video())

#period 3 structures
X = np.zeros((17, 17))
X[2, 4:7] = 1
X[4:7, 7] = 1
X += X.T
X += X[:, ::-1]
X += X[::-1, :]
anim=life_animation(X, frames=6)
HTML(anim.to_html5_video())

#glider
glider = [[1, 0, 0],
          [0, 1, 1],
          [1, 1, 0]]
X = np.zeros((8, 8))
X[:3, :3] = glider
anim=life_animation(X, dpi=5, frames=32, interval=100)
HTML(anim.to_html5_video())

#chaotic growth - jsut an example to show that is difficult to predict what is gona happen
unbounded = [[1, 1, 1, 0, 1],
             [1, 0, 0, 0, 0],
             [0, 0, 0, 1, 1],
             [0, 1, 1, 0, 1],
             [1, 0, 1, 0, 1]]
X = np.zeros((30, 40))
X[15:20, 18:23] = unbounded
anim=life_animation(X, dpi=10, frames=100, interval=200, mode='once')
HTML(anim.to_html5_video())

glider_gun =np.asarray(
[[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0],
[0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,1,1],
[0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,1,1],
[1,1,0,0,1,1,0,1,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0],
[1,1,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,1,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]])

X = np.zeros((50, 70))
PosX=1
PosY=1
Obj=glider_gun
X[PosX:PosX+Obj.shape[0],PosY:PosY+Obj.shape[1]] = Obj

anim=life_animation(X, dpi=15, frames=180, interval=50, mode='once')
HTML(anim.to_html5_video())

inverse_glider_gun=np.asarray(
[[0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0],
[1,1,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0],
[1,1,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0],
[0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,1,0,1,1,0,0,1,1],
[0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,1,1],
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,1,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0]])


X = np.zeros((50, 70))
PosX=1
PosY=30
Obj=inverse_glider_gun
X[PosX:PosX+Obj.shape[0],PosY:PosY+Obj.shape[1]] = Obj

anim=life_animation(X, dpi=15, frames=180, interval=50, mode='once')
HTML(anim.to_html5_video())

#collison
X = np.zeros((100, 100))
PosX=9
PosY=9
Obj=glider_gun
X[PosX:PosX+Obj.shape[0],PosY:PosY+Obj.shape[1]] = Obj

PosX=10
PosY=48
Obj=inverse_glider_gun
X[PosX:PosX+Obj.shape[0],PosY:PosY+Obj.shape[1]] = Obj

anim=life_animation(X, dpi=15, frames=180, interval=50, mode='once')
HTML(anim.to_html5_video())

#eater
eater1=np.asarray(
[[1,1,0,0],
[1,0,0,0],
[0,1,1,1],
[0,0,0,1]])


eater2=np.asarray(
[[0,0,0,1,1,0,0,1,1],
[1,0,0,0,1,0,0,1,1],
[1,1,1,1,0,0,0,0,0],
[0,0,0,0,0,0,0,0,0],
[1,1,0,0,0,0,0,0,0],
[1,1,0,0,0,0,0,0,0]])

X = np.zeros((100, 100))
PosX=1
PosY=1
Obj=glider_gun
X[PosX:PosX+Obj.shape[0],PosY:PosY+Obj.shape[1]] = Obj

PosX=16
PosY=29
Obj=eater1
X[PosX:PosX+Obj.shape[0],PosY:PosY+Obj.shape[1]] = Obj

#activating a given pixel the eater can be destroyed in a few iterations
X[18,29]=0


anim=life_animation(X, dpi=15, frames=180, interval=50, mode='once')
HTML(anim.to_html5_video())

