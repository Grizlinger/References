# -*- coding: utf-8 -*-
"""CellNN_Course_02a.ipynb m√°solata

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1avPWI987lKTPC4gi9trFKLrpHAAREwKJ
"""

import numpy as np
from math import pow
import matplotlib.pyplot as plt

#creates an initial CA, InitType, can be random, single or vector
def initial_CA(empty_CA, initType = False, vector=[]):
     if initType == 'single':
        for col in np.arange(0, columns):               
            if col == int(columns / 2) + 1:
               cell_state = 1              
            else:
               cell_state = 0
            empty_CA[0, col] = cell_state
     elif initType == 'vector':
          empty_CA[0, :] = vector  
     else:
        for col in np.arange(0, columns):              
           if np.random.random() < 0.5:  #50% chance for black or white 
              cell_state = 1
           else:
             cell_state = 0
           empty_CA[0, col] = cell_state               
     return empty_CA

#this function creates the truth table for a given rule as a hash map (dictionary in python)
def rule_dictionary(rule_number):
     pattern_dic = {}
     pattern_list = ['000','001','010','011','100','101','110','111']
    
     # I build my rule dictionary.
     for exponent in range(7, -1, -1):
        
        if rule_number >= pow(2, exponent):
            pattern_dic[pattern_list[exponent]] = 1
            rule_number = rule_number - pow(2, exponent)      
        else:
            pattern_dic[pattern_list[exponent]] = 0            
     return pattern_dic

#this function simulates a CA, calculates the next two from the previous
def simulation(empty_CA):   
    for row in np.arange(0, rows - 1):
        for col in np.arange(0, columns):
            cell_state = empty_CA[row, col]        
            
            cell_pattern = str(int(empty_CA[row, col - 1])) \
                        + str(int(empty_CA[row, col])) \
                        + str(int(empty_CA[row, (col + 1) % columns]))
            
            cell_state = pattern_dic[cell_pattern]
            
            empty_CA[row + 1, col] = cell_state    
        
    return empty_CA

#check rule 155
rule = 155
pattern_dic= rule_dictionary(rule)
for x in pattern_dic:
  print(x,pattern_dic[x])

rows = 100
columns = 21
empty_CA = np.zeros([rows, columns])
Init=np.random.randint(0,2,columns)
#empty_CA = initial_CA(empty_CA,initType ='single') 
empty_CA = initial_CA(empty_CA,initType ='vector',vector=Init) 
empty_CA= simulation(empty_CA)

fig1= plt.figure (figsize = (10,20))
plt.imshow(empty_CA, vmin= 0, vmax= 1, cmap= 'binary')
plt.axis('image')
plt.title('Rule: '+ str(rule), fontsize=14)
plt.show()

#check rule 155
rule = 155
pattern_dic= rule_dictionary(rule)
for x in pattern_dic:
  print(x,pattern_dic[x])

rows = 10
columns = 51
empty_CA = np.zeros([rows, columns])
Init=np.random.randint(0,2,columns)
# empty_CA = initial_CA(empty_CA,initType ='single') 
empty_CA = initial_CA(empty_CA,initType ='vector',vector=Init) 
empty_CA= simulation(empty_CA)

fig1= plt.figure (figsize = (10,20))
plt.imshow(empty_CA, vmin= 0, vmax= 1, cmap= 'binary')
plt.axis('image')
plt.title('Rule: '+ str(rule), fontsize=14)
plt.show()

#inverse rule of rule 155
rule = 38
pattern_dic= rule_dictionary(rule)
for x in pattern_dic:
  print(x,pattern_dic[x])

rows = 10
columns = 51
empty_CA = np.zeros([rows, columns])
#Init=np.random.randint(0,2,columns)
# empty_CA = initial_CA(empty_CA,initType ='single') 
empty_CA = initial_CA(empty_CA,initType ='vector',vector=1-Init) 
empty_CA= simulation(empty_CA)

fig1= plt.figure (figsize = (10,20))
plt.imshow(empty_CA, vmin= 0, vmax= 1, cmap= 'binary')
plt.axis('image')
plt.title('Rule: '+ str(rule), fontsize=14)
plt.show()

#left-right equivalent rule of rule 155
rule = 211
pattern_dic= rule_dictionary(rule)
for x in pattern_dic:
  print(x,pattern_dic[x])

rows = 10
columns = 51
empty_CA = np.zeros([rows, columns])
#Init=np.random.randint(0,2,columns)
# empty_CA = initial_CA(empty_CA,initType ='single') 
empty_CA = initial_CA(empty_CA,initType ='vector',vector=np.flip(Init,0)) 
empty_CA= simulation(empty_CA)

fig1= plt.figure (figsize = (10,20))
plt.imshow(empty_CA, vmin= 0, vmax= 1, cmap= 'binary')
plt.axis('image')
plt.title('Rule: '+ str(rule), fontsize=14)
plt.show()

#left-right equivalent inverse rule of rule 155
rule = 52
pattern_dic= rule_dictionary(rule)
for x in pattern_dic:
  print(x,pattern_dic[x])

rows = 10
columns = 51
empty_CA = np.zeros([rows, columns])
#Init=np.random.randint(0,2,columns)
# empty_CA = initial_CA(empty_CA,initType ='single') 
empty_CA = initial_CA(empty_CA,initType ='vector',vector=1-np.flip(Init,0)) 
empty_CA= simulation(empty_CA)

fig1= plt.figure (figsize = (10,20))
plt.imshow(empty_CA, vmin= 0, vmax= 1, cmap= 'binary')
plt.axis('image')
plt.title('Rule: '+ str(rule), fontsize=14)
plt.show()